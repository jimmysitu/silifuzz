// Copyright 2022 The SiliFuzz Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "./common/snapshot_test_config.h"

#include <cstddef>

#include "./common/snapshot_test_enum.h"
#include "./util/arch.h"

namespace silifuzz {
namespace {

// This file is generated by generate_tests.py. Do not edit this file by hand.

const TestSnapshotConfig configs[53] = {
    {
        .type = TestSnapshot::kEmpty,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x32345000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x10000,
        .data_num_bytes = 0x1000,
        //     32345000:   <empty>
        .instruction_bytes = {},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kEndsAsExpected,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x32355000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x20000,
        .data_num_bytes = 0x1000,
        //     32355000:   90                      nop
        .instruction_bytes = {0x90},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kEndsUnexpectedly,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x32365000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x30000,
        .data_num_bytes = 0x1000,
        //     32365000:   cc                      int3
        .instruction_bytes = {0xcc},
        .normal_end = false,
    },
    {
        .type = TestSnapshot::kRegsMismatch,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x32375000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x40000,
        .data_num_bytes = 0x1000,
        //     32375000:   48 31 e0                xor    %rsp,%rax
        .instruction_bytes = {0x48, 0x31, 0xe0},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kMemoryMismatch,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x32385000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x50000,
        .data_num_bytes = 0x1000,
        //     32385000:   9c                      pushf
        //     32385001:   50                      push   %rax
        //     32385002:   48 31 c0                xor    %rax,%rax
        //     32385005:   48 f7 d0                not    %rax
        //     32385008:   50                      push   %rax
        //     32385009:   58                      pop    %rax
        //     3238500a:   58                      pop    %rax
        //     3238500b:   9d                      popf
        .instruction_bytes = {0x9c, 0x50, 0x48, 0x31, 0xc0, 0x48, 0xf7, 0xd0,
                              0x50, 0x58, 0x58, 0x9d},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kRegsAndMemoryMismatch,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x32395000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x60000,
        .data_num_bytes = 0x1000,
        //     32395000:   48 31 e3                xor    %rsp,%rbx
        //     32395003:   48 31 c0                xor    %rax,%rax
        //     32395006:   48 f7 d0                not    %rax
        //     32395009:   50                      push   %rax
        .instruction_bytes = {0x48, 0x31, 0xe3, 0x48, 0x31, 0xc0, 0x48, 0xf7,
                              0xd0, 0x50},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kRegsMismatchRandom,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x323a5000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x70000,
        .data_num_bytes = 0x1000,
        //     323a5000:   48 c7 c0 01 00 00 00    mov    $0x1,%rax
        //     323a5007:   0f a2                   cpuid
        //     323a5009:   81 e1 00 00 00 40       and    $0x40000000,%ecx
        //     323a500f:   74 06                   je     0x323a5017
        //     323a5011:   48 0f c7 f0             rdrand %rax
        //     323a5015:   eb 02                   jmp    0x323a5019
        //     323a5017:   0f 31                   rdtsc
        .instruction_bytes = {0x48, 0xc7, 0xc0, 0x1,  0x0, 0x0,  0x0,
                              0xf,  0xa2, 0x81, 0xe1, 0x0, 0x0,  0x0,
                              0x40, 0x74, 0x6,  0x48, 0xf, 0xc7, 0xf0,
                              0xeb, 0x2,  0xf,  0x31},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kMemoryMismatchRandom,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x323b5000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x80000,
        .data_num_bytes = 0x1000,
        //     323b5000:   9c                      pushf
        //     323b5001:   50                      push   %rax
        //     323b5002:   52                      push   %rdx
        //     323b5003:   0f 31                   rdtsc
        //     323b5005:   50                      push   %rax
        //     323b5006:   58                      pop    %rax
        //     323b5007:   5a                      pop    %rdx
        //     323b5008:   58                      pop    %rax
        //     323b5009:   9d                      popf
        .instruction_bytes = {0x9c, 0x50, 0x52, 0xf, 0x31, 0x50, 0x58, 0x5a,
                              0x58, 0x9d},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kRegsAndMemoryMismatchRandom,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x323c5000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x90000,
        .data_num_bytes = 0x1000,
        //     323c5000:   0f 31                   rdtsc
        //     323c5002:   50                      push   %rax
        .instruction_bytes = {0xf, 0x31, 0x50},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kICEBP,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x323d5000,
        .code_num_bytes = 0x1000,
        .data_addr = 0xa0000,
        .data_num_bytes = 0x1000,
        //     323d5000:   f1                      int1
        .instruction_bytes = {0xf1},
        .normal_end = false,
    },
    {
        .type = TestSnapshot::kBreakpoint,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x323e5000,
        .code_num_bytes = 0x1000,
        .data_addr = 0xb0000,
        .data_num_bytes = 0x1000,
        //     323e5000:   cc                      int3
        .instruction_bytes = {0xcc},
        .normal_end = false,
    },
    {
        .type = TestSnapshot::kINT3_CD03,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x323f5000,
        .code_num_bytes = 0x1000,
        .data_addr = 0xc0000,
        .data_num_bytes = 0x1000,
        //     323f5000:   cd 03                   int    $0x3
        .instruction_bytes = {0xcd, 0x3},
        .normal_end = false,
    },
    {
        .type = TestSnapshot::kSigIll,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x32405000,
        .code_num_bytes = 0x1000,
        .data_addr = 0xd0000,
        .data_num_bytes = 0x1000,
        //     32405000:   0f 0b                   ud2
        .instruction_bytes = {0xf, 0xb},
        .normal_end = false,
    },
    {
        .type = TestSnapshot::kSigSegvWrite,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x32415000,
        .code_num_bytes = 0x1000,
        .data_addr = 0xe0000,
        .data_num_bytes = 0x1000,
        //     32415000:   48 31 c0                xor    %rax,%rax
        //     32415003:   48 89 18                mov    %rbx,(%rax)
        .instruction_bytes = {0x48, 0x31, 0xc0, 0x48, 0x89, 0x18},
        .normal_end = false,
    },
    {
        .type = TestSnapshot::kSigSegvWriteFixable,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x32425000,
        .code_num_bytes = 0x1000,
        .data_addr = 0xf0000,
        .data_num_bytes = 0x1000,
        //     32425000:   48 c7 c0 00 00 01 00    mov    $0x10000,%rax
        //     32425007:   48 89 18                mov    %rbx,(%rax)
        .instruction_bytes = {0x48, 0xc7, 0xc0, 0x0, 0x0, 0x1, 0x0, 0x48, 0x89,
                              0x18},
        .normal_end = false,
    },
    {
        .type = TestSnapshot::kSigSegvRead,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x32435000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x100000,
        .data_num_bytes = 0x1000,
        //     32435000:   48 31 c0                xor    %rax,%rax
        //     32435003:   48 8b 18                mov    (%rax),%rbx
        .instruction_bytes = {0x48, 0x31, 0xc0, 0x48, 0x8b, 0x18},
        .normal_end = false,
    },
    {
        .type = TestSnapshot::kSigSegvReadFixable,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x32445000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x110000,
        .data_num_bytes = 0x1000,
        //     32445000:   48 c7 c0 00 00 01 00    mov    $0x10000,%rax
        //     32445007:   48 8b 18                mov    (%rax),%rbx
        .instruction_bytes = {0x48, 0xc7, 0xc0, 0x0, 0x0, 0x1, 0x0, 0x48, 0x8b,
                              0x18},
        .normal_end = false,
    },
    {
        .type = TestSnapshot::kSigSegvExec,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x32455000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x120000,
        .data_num_bytes = 0x1000,
        //     32455000:   48 c7 c0 00 00 02 00    mov    $0x20000,%rax
        //     32455007:   ff e0                   jmp    *%rax
        .instruction_bytes = {0x48, 0xc7, 0xc0, 0x0, 0x0, 0x2, 0x0, 0xff, 0xe0},
        .normal_end = false,
    },
    {
        .type = TestSnapshot::kSyscall,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x32465000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x130000,
        .data_num_bytes = 0x1000,
        //     32465000:   48 31 f6                xor    %rsi,%rsi
        //     32465003:   48 31 ff                xor    %rdi,%rdi
        //     32465006:   48 c7 c0 35 01 00 00    mov    $0x135,%rax
        //     3246500d:   0f 05                   syscall
        //     3246500f:   48 31 c0                xor    %rax,%rax
        .instruction_bytes = {0x48, 0x31, 0xf6, 0x48, 0x31, 0xff, 0x48, 0xc7,
                              0xc0, 0x35, 0x1, 0x0, 0x0, 0xf, 0x5, 0x48, 0x31,
                              0xc0},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kGeneralProtectionFault,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x32475000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x140000,
        .data_num_bytes = 0x1000,
        //     32475000:   0f ae 05 01 00 00 00    fxsave 0x1(%rip)        #
        //     0x32475008
        .instruction_bytes = {0xf, 0xae, 0x5, 0x1, 0x0, 0x0, 0x0},
        .normal_end = false,
    },
    {
        .type = TestSnapshot::kChangesSegmentReg,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x32485000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x150000,
        .data_num_bytes = 0x1000,
        //     32485000:   66 b8 03 00             mov    $0x3,%ax
        //     32485004:   8e c0                   mov    %eax,%es
        //     32485006:   8e d8                   mov    %eax,%ds
        //     32485008:   8e e8                   mov    %eax,%gs
        //     3248500a:   8e e0                   mov    %eax,%fs
        .instruction_bytes = {0x66, 0xb8, 0x3, 0x0, 0x8e, 0xc0, 0x8e, 0xd8,
                              0x8e, 0xe8, 0x8e, 0xe0},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kIn,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x32495000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x160000,
        .data_num_bytes = 0x1000,
        //     32495000:   ed                      in     (%dx),%eax
        .instruction_bytes = {0xed},
        .normal_end = false,
    },
    {
        .type = TestSnapshot::kRunaway,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x324a5000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x170000,
        .data_num_bytes = 0x1000,
        //     324a5000:   eb fe                   jmp    0x324a5000
        .instruction_bytes = {0xeb, 0xfe},
        .normal_end = false,
    },
    {
        .type = TestSnapshot::kSplitLock,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x324b5000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x180000,
        .data_num_bytes = 0x1000,
        //     324b5000:   48 89 e0                mov    %rsp,%rax
        //     324b5003:   48 ff c8                dec    %rax
        //     324b5006:   30 c0                   xor    %al,%al
        //     324b5008:   f0 ff 40 ff             lock incl -0x1(%rax)
        .instruction_bytes = {0x48, 0x89, 0xe0, 0x48, 0xff, 0xc8, 0x30, 0xc0,
                              0xf0, 0xff, 0x40, 0xff},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kSetThreeRegisters,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x324c5000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x190000,
        .data_num_bytes = 0x1000,
        //     324c5000:   48 83 c2 02             add    $0x2,%rdx
        //     324c5004:   48 83 c1 03             add    $0x3,%rcx
        //     324c5008:   49 83 c0 04             add    $0x4,%r8
        .instruction_bytes = {0x48, 0x83, 0xc2, 0x2, 0x48, 0x83, 0xc1, 0x3,
                              0x49, 0x83, 0xc0, 0x4},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kExitGroup,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x324d5000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x1a0000,
        .data_num_bytes = 0x1000,
        //     324d5000:   48 c7 c0 e7 00 00 00    mov    $0xe7,%rax
        //     324d5007:   48 31 ff                xor    %rdi,%rdi
        //     324d500a:   0f 05                   syscall
        .instruction_bytes = {0x48, 0xc7, 0xc0, 0xe7, 0x0, 0x0, 0x0, 0x48, 0x31,
                              0xff, 0xf, 0x5},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kVSyscallRegionAccess,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x324e5000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x1b0000,
        .data_num_bytes = 0x1000,
        //     324e5000:   48 c7 c0 00 00 60 ff    mov $0xffffffffff600000,%rax
        //     324e5007:   48 8b 18                mov    (%rax),%rbx
        .instruction_bytes = {0x48, 0xc7, 0xc0, 0x0, 0x0, 0x60, 0xff, 0x48,
                              0x8b, 0x18},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kHasUnobservableNondeterministicInsn,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x324f5000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x1c0000,
        .data_num_bytes = 0x1000,
        //     324f5000:   0f 31                   rdtsc
        //     324f5002:   31 c0                   xor    %eax,%eax
        //     324f5004:   31 d2                   xor    %edx,%edx
        .instruction_bytes = {0xf, 0x31, 0x31, 0xc0, 0x31, 0xd2},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kUalignedExitingStackPointer,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x32505000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x1d0000,
        .data_num_bytes = 0x1000,
        //     32505000:   48 83 ec 01             sub    $0x1,%rsp
        .instruction_bytes = {0x48, 0x83, 0xec, 0x1},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kFuzzingConfigNonconformance,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x32515000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x1e0000,
        .data_num_bytes = 0x1000,
        //     32515000:   48 8b 04 25 00 00 00    mov    0x28000000,%rax
        //     32515007:   28
        .instruction_bytes = {0x48, 0x8b, 0x4, 0x25, 0x0, 0x0, 0x0, 0x28},
        .normal_end = false,
    },
    {
        .type = TestSnapshot::kExpensiveInstructions,
        .arch = ArchitectureId::kX86_64,
        .code_addr = 0x32525000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x1f0000,
        .data_num_bytes = 0x1000,
        //     32525000:   d9 ee                   fldz
        //     32525002:   d9 ff                   fcos
        //     32525004:   d9 f2                   fptan
        .instruction_bytes = {0xd9, 0xee, 0xd9, 0xff, 0xd9, 0xf2},
        .normal_end = false,
    },
    {
        .type = TestSnapshot::kEmpty,
        .arch = ArchitectureId::kAArch64,
        .code_addr = 0x32345000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x700000000,
        .data_num_bytes = 0x1000,
        //     32345000:   <empty>
        .instruction_bytes = {},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kEndsAsExpected,
        .arch = ArchitectureId::kAArch64,
        .code_addr = 0x32355000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x700010000,
        .data_num_bytes = 0x1000,
        //     32355000:   d503201f        nop
        .instruction_bytes = {0x1f, 0x20, 0x3, 0xd5},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kEndsUnexpectedly,
        .arch = ArchitectureId::kAArch64,
        .code_addr = 0x32365000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x700020000,
        .data_num_bytes = 0x1000,
        //     32365000:   00000000        udf     #0
        .instruction_bytes = {0x0, 0x0, 0x0, 0x0},
        .normal_end = false,
    },
    {
        .type = TestSnapshot::kRegsMismatch,
        .arch = ArchitectureId::kAArch64,
        .code_addr = 0x32375000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x700030000,
        .data_num_bytes = 0x1000,
        //     32375000:   aa2003e0        mvn     x0, x0
        .instruction_bytes = {0xe0, 0x3, 0x20, 0xaa},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kMemoryMismatch,
        .arch = ArchitectureId::kAArch64,
        .code_addr = 0x32385000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x700040000,
        .data_num_bytes = 0x1000,
        //     32385000:   f81f83e0        stur    x0, [sp, #-8]
        //     32385004:   aa3f03e0        mvn     x0, xzr
        //     32385008:   f81c03e0        stur    x0, [sp, #-64]
        //     3238500c:   f85f83e0        ldur    x0, [sp, #-8]
        .instruction_bytes = {0xe0, 0x83, 0x1f, 0xf8, 0xe0, 0x3, 0x3f, 0xaa,
                              0xe0, 0x3, 0x1c, 0xf8, 0xe0, 0x83, 0x5f, 0xf8},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kRegsMismatchRandom,
        .arch = ArchitectureId::kAArch64,
        .code_addr = 0x32395000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x700050000,
        .data_num_bytes = 0x1000,
        //     32395000:   d53be041        mrs     x1, cntvct_el0
        .instruction_bytes = {0x41, 0xe0, 0x3b, 0xd5},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kMemoryMismatchRandom,
        .arch = ArchitectureId::kAArch64,
        .code_addr = 0x323a5000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x700060000,
        .data_num_bytes = 0x1000,
        //     323a5000:   f90003e1        str     x1, [sp]
        //     323a5004:   d53be041        mrs     x1, cntvct_el0
        //     323a5008:   f81c03e1        stur    x1, [sp, #-64]
        //     323a500c:   f94003e1        ldr     x1, [sp]
        .instruction_bytes = {0xe1, 0x3, 0x0, 0xf9, 0x41, 0xe0, 0x3b, 0xd5,
                              0xe1, 0x3, 0x1c, 0xf8, 0xe1, 0x3, 0x40, 0xf9},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kRegsAndMemoryMismatchRandom,
        .arch = ArchitectureId::kAArch64,
        .code_addr = 0x323b5000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x700070000,
        .data_num_bytes = 0x1000,
        //     323b5000:   d53be041        mrs     x1, cntvct_el0
        //     323b5004:   a9bf07e1        stp     x1, x1, [sp, #-16]!
        .instruction_bytes = {0x41, 0xe0, 0x3b, 0xd5, 0xe1, 0x7, 0xbf, 0xa9},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kBreakpoint,
        .arch = ArchitectureId::kAArch64,
        .code_addr = 0x323c5000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x700080000,
        .data_num_bytes = 0x1000,
        //     323c5000:   d4200000        brk     #0x0
        .instruction_bytes = {0x0, 0x0, 0x20, 0xd4},
        .normal_end = false,
    },
    {
        .type = TestSnapshot::kSigIll,
        .arch = ArchitectureId::kAArch64,
        .code_addr = 0x323d5000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x700090000,
        .data_num_bytes = 0x1000,
        //     323d5000:   d69f03e0        eret
        .instruction_bytes = {0xe0, 0x3, 0x9f, 0xd6},
        .normal_end = false,
    },
    {
        .type = TestSnapshot::kSigSegvWrite,
        .arch = ArchitectureId::kAArch64,
        .code_addr = 0x323e5000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x7000a0000,
        .data_num_bytes = 0x1000,
        //     323e5000:   aa1f03e0        mov     x0, xzr
        //     323e5004:   f9000001        str     x1, [x0]
        .instruction_bytes = {0xe0, 0x3, 0x1f, 0xaa, 0x1, 0x0, 0x0, 0xf9},
        .normal_end = false,
    },
    {
        .type = TestSnapshot::kSigSegvWriteFixable,
        .arch = ArchitectureId::kAArch64,
        .code_addr = 0x323f5000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x7000b0000,
        .data_num_bytes = 0x1000,
        //     323f5000:   d2c000e0        mov     x0, #0x700000000
        //     323f5004:   f9000001        str     x1, [x0]
        .instruction_bytes = {0xe0, 0x0, 0xc0, 0xd2, 0x1, 0x0, 0x0, 0xf9},
        .normal_end = false,
    },
    {
        .type = TestSnapshot::kSigSegvRead,
        .arch = ArchitectureId::kAArch64,
        .code_addr = 0x32405000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x7000c0000,
        .data_num_bytes = 0x1000,
        //     32405000:   aa1f03e0        mov     x0, xzr
        //     32405004:   f9400000        ldr     x0, [x0]
        .instruction_bytes = {0xe0, 0x3, 0x1f, 0xaa, 0x0, 0x0, 0x40, 0xf9},
        .normal_end = false,
    },
    {
        .type = TestSnapshot::kSigSegvReadFixable,
        .arch = ArchitectureId::kAArch64,
        .code_addr = 0x32415000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x7000d0000,
        .data_num_bytes = 0x1000,
        //     32415000:   d2c000e0        mov     x0, #0x700000000
        //     32415004:   f9400000        ldr     x0, [x0]
        .instruction_bytes = {0xe0, 0x0, 0xc0, 0xd2, 0x0, 0x0, 0x40, 0xf9},
        .normal_end = false,
    },
    {
        .type = TestSnapshot::kSigSegvExec,
        .arch = ArchitectureId::kAArch64,
        .code_addr = 0x32425000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x7000e0000,
        .data_num_bytes = 0x1000,
        //     32425000:   d2c000e0        mov     x0, #0x700000000
        //     32425004:   d61f0000        br      x0
        .instruction_bytes = {0xe0, 0x0, 0xc0, 0xd2, 0x0, 0x0, 0x1f, 0xd6},
        .normal_end = false,
    },
    {
        .type = TestSnapshot::kSyscall,
        .arch = ArchitectureId::kAArch64,
        .code_addr = 0x32435000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x7000f0000,
        .data_num_bytes = 0x1000,
        //     32435000:   aa1f03e0        mov     x0, xzr
        //     32435004:   aa1f03e1        mov     x1, xzr
        //     32435008:   aa1f03e2        mov     x2, xzr
        //     3243500c:   d28026a8        mov     x8, #0x135
        //     32435010:   d4000001        svc     #0x0
        //     32435014:   aa1f03e0        mov     x0, xzr
        .instruction_bytes = {0xe0, 0x3, 0x1f, 0xaa, 0xe1, 0x3,  0x1f, 0xaa,
                              0xe2, 0x3, 0x1f, 0xaa, 0xa8, 0x26, 0x80, 0xd2,
                              0x1,  0x0, 0x0,  0xd4, 0xe0, 0x3,  0x1f, 0xaa},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kRunaway,
        .arch = ArchitectureId::kAArch64,
        .code_addr = 0x32445000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x700100000,
        .data_num_bytes = 0x1000,
        //     32445000:   14000000        b       0x32445000
        .instruction_bytes = {0x0, 0x0, 0x0, 0x14},
        .normal_end = false,
    },
    {
        .type = TestSnapshot::kSetThreeRegisters,
        .arch = ArchitectureId::kAArch64,
        .code_addr = 0x32455000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x700110000,
        .data_num_bytes = 0x1000,
        //     32455000:   91000842        add     x2, x2, #0x2
        //     32455004:   91000c63        add     x3, x3, #0x3
        //     32455008:   91001084        add     x4, x4, #0x4
        .instruction_bytes = {0x42, 0x8, 0x0, 0x91, 0x63, 0xc, 0x0, 0x91, 0x84,
                              0x10, 0x0, 0x91},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kExitGroup,
        .arch = ArchitectureId::kAArch64,
        .code_addr = 0x32465000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x700120000,
        .data_num_bytes = 0x1000,
        //     32465000:   aa1f03e0        mov     x0, xzr
        //     32465004:   d2800bc8        mov     x8, #0x5e
        //     32465008:   d4000001        svc     #0x0
        .instruction_bytes = {0xe0, 0x3, 0x1f, 0xaa, 0xc8, 0xb, 0x80, 0xd2, 0x1,
                              0x0, 0x0, 0xd4},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kHasUnobservableNondeterministicInsn,
        .arch = ArchitectureId::kAArch64,
        .code_addr = 0x32475000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x700130000,
        .data_num_bytes = 0x1000,
        //     32475000:   d5380700        mrs     x0, id_aa64mmfr0_el1
        //     32475004:   aa1f03e0        mov     x0, xzr
        .instruction_bytes = {0x0, 0x7, 0x38, 0xd5, 0xe0, 0x3, 0x1f, 0xaa},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kUalignedExitingStackPointer,
        .arch = ArchitectureId::kAArch64,
        .code_addr = 0x32485000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x700140000,
        .data_num_bytes = 0x1000,
        //     32485000:   d10007ff        sub     sp, sp, #0x1
        .instruction_bytes = {0xff, 0x7, 0x0, 0xd1},
        .normal_end = true,
    },
    {
        .type = TestSnapshot::kFuzzingConfigNonconformance,
        .arch = ArchitectureId::kAArch64,
        .code_addr = 0x32495000,
        .code_num_bytes = 0x1000,
        .data_addr = 0x700150000,
        .data_num_bytes = 0x1000,
        //     32495000:   d2c00100        mov     x0, #0x800000000
        //     32495004:   f9400000        ldr     x0, [x0]
        .instruction_bytes = {0x0, 0x1, 0xc0, 0xd2, 0x0, 0x0, 0x40, 0xf9},
        .normal_end = true,
    },
};

}  // namespace

const TestSnapshotConfig* GetTestSnapshotConfig(ArchitectureId arch,
                                                TestSnapshot type) {
  for (size_t i = 0; i < sizeof(configs) / sizeof(TestSnapshotConfig); i++) {
    if (configs[i].arch == arch && configs[i].type == type) {
      return &configs[i];
    }
  }
  return nullptr;
}

}  // namespace silifuzz
