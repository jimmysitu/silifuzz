// Copyright 2022 The SiliFuzz Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package silifuzz.proto;

import "google/protobuf/timestamp.proto";
import "proto/player_result.proto";

// Memory checksum status after the snapshot failed (if any).
message ChecksumStatus {
  enum Enum {
    // No checksum was present in the snapshot or the checksum was not
    // computed.
    NOT_CHECKED = 0;

    // The checksum matched.
    MATCH = 1;

    // The checksum did not match.
    MISMATCH = 2;
  }
}

// A proto to store snapshot execution result identified by a snapshot ID
// and a play result.
// NextID: 6
message SnapshotExecutionResult {
  // ID of the snapshot.
  optional string snapshot_id = 1;  // semantically required.

  // Machine hostname where the snapshot was executed. Should not contain
  // the domain name part (e.g. just abc123)
  optional string hostname = 4;  // semantically required

  // Execution result from Player.
  optional PlayerResult player_result = 2;

  // Time when this result was recorded.
  // NOTE that this field must be preserved for compatibility with older
  // text-formatted results.
  // TODO(ksteuck): Revisit once the old data has gone beyond the analysis
  // horizon (Q2 2025-ish).
  optional google.protobuf.Timestamp time = 3 [deprecated = true];

  // Memory checksum status after the snapshot failed (if any).
  optional ChecksumStatus.Enum postfailure_checksum_status = 5;
}

// RunnerOutput represents the result of a single runner execution.
message RunnerOutput {
  // Overall execution result.
  message ExecutionResult {
    enum StatusCode {
      INTERNAL_ERROR = 0;

      // Runner executed successfully.
      OK = 1;

      // Runner crashed due to an unhandled signal.
      UNHANDLED_SIGNAL = 2;

      // Runner failed to mmap a memory mapping.
      MMAP_FAILED = 3;

      // Runner detected overlapping memory mappings.
      OVERLAPPING_MAPPINGS = 4;

      // Runner detected a checksum mismatch before running any tests.
      INITIAL_CHECKSUM_MISMATCH = 5;

      // One of the snapshots failed to execute. Inspect
      // `failed_snapshot_execution` for details.
      SNAPSHOT_FAILED = 6;
    }

    // Status code for this execution. Semantically required.
    optional StatusCode code = 1;

    // An optional human-readable message.
    optional string msg = 2;
  }
  // Semantically required.
  optional ExecutionResult execution_result = 1;

  // An optional failed snapshot execution result.
  optional SnapshotExecutionResult failed_snapshot_execution = 2;

  // Memory checksum status after the snapshot failed (if any).
  optional ChecksumStatus.Enum postfailure_checksum_status = 3;
}
